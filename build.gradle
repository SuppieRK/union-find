import java.nio.charset.StandardCharsets

plugins {
    id 'java'
    id 'java-library'

    id 'idea'
    id 'eclipse'

    id 'info.solidsoft.pitest' version '1.15.0'
    id 'me.champeau.jmh' version '0.7.3'

    // Publishing
    id 'com.vanniktech.maven.publish' version '0.34.0'

    // Utility
    id 'jacoco'
    id 'org.sonarqube' version '6.3.1.5724'
    id 'com.diffplug.spotless' version '7.2.1'
}

// Project properties
group = "$GROUP"
version = "$VERSION_NAME"
description = "$POM_DESCRIPTION"

// Source code properties
java {
    def version = JavaVersion.VERSION_11

    sourceCompatibility = version.toString()
    targetCompatibility = version.toString()

    toolchain {
        languageVersion = JavaLanguageVersion.of(version.toString())
    }
}

// Enable Spotless code formatting rules
spotless {
    java {
        target '**/src/*/java/**/*.java'

        // Aligns with Intellij IDEA default settings
        toggleOffOn('@formatter:off', '@formatter:on')

        googleJavaFormat()
    }
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.13.4'
}

tasks.register('sourceJar', Jar){dependsOn classes
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

tasks.register('javadocJar', Jar){dependsOn javadoc
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives javadocJar
    archives sourceJar
}

// Configure several tasks additionally for Gradle
tasks.withType(Copy).configureEach {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = StandardCharsets.UTF_8.name()
    dependsOn(spotlessJavaCheck)
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test

    reports {
        html.required = true
        xml.required = true
        csv.required = false
    }
}

pitest {
    targetClasses = ['io.github.suppierk.*']
    threads = 1
    outputFormats = ['HTML']
    timestampedReports = false
    junit5PluginVersion = '1.2.1'
}

jmh {
    jvmArgsAppend = ['-Xmx2G']
    profilers = ['jfr']
    benchmarkMode = ['avgt']

    timeUnit = 'ns'
}

sonar {
    properties {
        property "sonar.projectKey", "SuppieRK_union-find"
        property "sonar.organization", "suppierk"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}